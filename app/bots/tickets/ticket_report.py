import datetime
import discord
import json
from discord.ext import commands
from colorama import Back, Fore, Style
from discord import app_commands, utils
from discord.ui import View, Button
from app.bots.database.database import dbMaria
import config 
import logging
from unicodedata import category
import asyncio

class ticket_system_report(commands.Cog):
    def __init__(self, client: commands.Bot):
        self.client = client
    @app_commands.command(name="new_ticket_system_report", description="–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è > –†–µ–ø–æ—Ä—Ç–æ–≤")
    @app_commands.checks.has_permissions(administrator=True)
    async def ticket_system_report(self, interaction: discord.Interaction):
        Embed = discord.Embed(title="üìåüûÑ –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è - –†–µ–ø–æ—Ä—Ç–æ–≤!", description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", color=0xffffff)
        Embed.set_author(name=f"{config.ticket_system_author}")
        Embed.set_footer(text="``–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–æ–≤: –†–∞–±–æ—Ç–∞–µ—Ç``")

        embed_main = discord.Embed(color=0xffffff, title="üåè ‚Äß ùêãùêíùêÇ - ùôéùôöùôßùô´ùôûùôòùôöùô®", description="""
- –ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –∫–∞–∫–æ–π-–ª–∏–±–æ **–ø—Ä–æ–±–ª–µ–º–æ–π**
–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –±—É–¥—å —Ç–æ **–Ω–∞—Ä—É—à–µ–Ω–∏–µ** *–ø—Ä–∞–≤–∏–ª*, *–±–∞–≥*, 
–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–∞ *–ø–æ–º–æ—â—å*, 
``·¥Ñ–æ–∑–¥·¥Ä–π·¥õ·¥á ·¥õ–∏·¥ã·¥á·¥õ  ô –Ω·¥Ä…Ø·¥á–π ·¥Ñ–∏·¥Ñ·¥õ·¥á ç·¥á!``
- **__–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!)__**
- <#1205649863937761370>

- –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ **–°–æ–∑–¥–∞—Ç—å –¢–∏–∫–µ—Ç**
    - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *__–°–æ–∑–¥–∞—Ç—å –¢–∏–∫–µ—Ç__*
""")
        embed_main.set_footer(text="**ùêãùêíùêÇ - ùôéùôöùôßùô´ùôûùôòùôöùô®**  [‚úÖ]")
        embed_main.set_image(url="https://i.imgur.com/38rEjs8.png")

        view = create_ticket_reports()

        await interaction.channel.send(embed=embed_main)
        await interaction.channel.send(embed=Embed, view=view)
        print(f"{Fore.RED}{interaction.user} {Fore.YELLOW}created ticket system: {Fore.GREEN}ticket_system_report{Fore.RESET}")
        await interaction.response.send_message("ticket_system_start_reports", ephemeral=True)


class create_ticket_reports(View):    
    def __init__(self):
        super().__init__(timeout=None)
    @discord.ui.button(label="–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", style=discord.ButtonStyle.green, custom_id="ticket_button_report", emoji="üéü")
    @app_commands.checks.has_permissions(send_messages=True)
    async def create_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal_windows = await interaction.response.send_modal(modal_window_ticket_system_report())
        if modal_windows is None:
            print(f"{Fore.RED}{interaction.user} {Fore.YELLOW}created ticket: {Fore.GREEN}Ticket-System-001{Fore.RESET}")
        else:
            await modal_windows.delete()






@app_commands.describe(problem="–ü—Ä–æ–±–ª–µ–º–∞", description_problem="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
class modal_window_ticket_system_report(discord.ui.Modal, title="üìåüûÑ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è: —Ä–µ–ø–æ—Ä—Ç–æ–≤"):
    problem = discord.ui.TextInput(label="–ü—Ä–æ–±–ª–µ–º–∞", placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –∫—Ä–∞—Ü–∏–∏", style=discord.TextStyle.short)
    description_problem = discord.ui.TextInput(label="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", placeholder="–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É", style=discord.TextStyle.paragraph)
    async def on_submit(self, interaction: discord.Interaction):
        by_category = discord.utils.get(interaction.guild.categories, id=config.ticket_system_report_category)
        ticket = utils.get(interaction.guild.channels, name=f"report-{interaction.user.name}-{interaction.user.id}")
        if ticket is not None:
            await interaction.response.send_message("–¢—ã —É–∂–µ —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç!", ephemeral=True)
            return
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
            interaction.user: discord.PermissionOverwrite(read_messages=True, view_channel=True, send_messages=True, embed_links= True, read_message_history = True),
            interaction.guild.me: discord.PermissionOverwrite(read_messages=True, view_channel=True, send_messages=True, embed_links= True, read_message_history = True)
        }
        channel = await interaction.guild.create_text_channel(f"report-{interaction.user.name}-{interaction.user.id}", category=by_category, overwrites=overwrites, reason=f"–¢–∏–∫–µ—Ç—ã {interaction.user}")
        print(f"{Fore.RED}{interaction.user} {Fore.YELLOW}created ticket: {Fore.GREEN}Ticket-System-001{Fore.RESET}")
        if channel.category is not None:
            embed_ticket_player = discord.Embed(title=f"–¢–∏–∫–µ—Ç ID:``{channel.id}``", description=f"----", color= discord.Colour.blue())
            embed_ticket_player.add_field(name=f"–ö–∞–Ω–∞–ª: {channel.mention}", value="")
            embed_ticket_player.add_field(name=f"–ü—Ä–æ–±–ª–µ–º–∞", value=f"{self.problem}", inline=False)
            embed_ticket_player.add_field(name=f"–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", value=f"{self.description_problem}", inline=False)
            message_id = await channel.send(f"{interaction.user.mention}",embed=embed_ticket_player)
            embed_message_control_tickets = discord.Embed(title=f"–¢–∏–∫–µ—Ç ID:``{channel.id}``", description=f"{interaction.user.mention} —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç - –ø–æ —Ä–µ–ø–æ—Ä—Ç–∞–º")
            embed_message_control_tickets.add_field(name=f"–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è : ", value=f"–ö–∞–Ω–∞–ª: {channel.mention}")
            control_message = interaction.guild.get_channel(config.ticket_system_report_channel_request)
            message_id_control = await control_message.send(embed=embed_message_control_tickets, view=buttons_on_control_ticket_by_moderator())
            data = {
                "chat_id": channel.id,
                "message_id_control_panel": message_id_control.id,
                "message_id": message_id.id,
                "user_name": interaction.user.name,
                "user_id": interaction.user.id,
                "data_create_ticket": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            }
            sync_database = await save_ticket_create(data=data,table_name="tickets")
            if sync_database is False:
                print(f"Error saving ticket to database: {sync_database}")
                return await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", ephemeral=True)
            else:
                # await interaction.user.send(embed=embed_ticket_player)
                await interaction.response.send_message("–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω!", ephemeral=True)
        else:
            print(f"Error creating ticket: Category not found.")
            return await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", ephemeral=True)


class buttons_on_control_ticket_by_moderator(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.plus_button_clicked_by_user = False
    @discord.ui.button(label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", style=discord.ButtonStyle.gray, custom_id="ticket_button_info", emoji="üåé")
    @app_commands.checks.has_permissions(administrator=True)
    async def info_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            embed_information_how_to_use = discord.Embed(title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", description="–ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ç–µ.", color= discord.Colour.dark_grey())
            await interaction.response.send_message(embed=embed_information_how_to_use, ephemeral=True)
        except Exception as e:
            print(f"Error touch button: {e}")
            return await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!", ephemeral=True)
    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.green, custom_id="ticket_button_consideration", emoji="üó°")
    @app_commands.checks.has_permissions(administrator=True)
    async def consideration_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            if not self.plus_button_clicked_by_user:
                self.plus_button_clicked_by_user = True
                ticket_data = dbMaria.get_data_by_condition(condition_column='message_id_control_panel', condition_value=interaction.message.id, table_name='tickets')
                self.db_manager.update_data('tickets', new_data={
                    'user_moderator_id': interaction.user.id,
                    'user_moderator_name': interaction.user.name, 
                    'data_open_ticket': datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    }, condition_column='message_id_control_panel', condition_value=interaction.message.id)  
                button.disabled = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—É—é
                await interaction.response.defer_update()  # –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
                if ticket_data:
                    message_id_str = ticket_data[0][1]
                    message_id_int = int(message_id_str)
                    channel_id = message_id_int
                    channel = interaction.guild.get_channel(channel_id)
                    if channel:
                        embed_control = discord.Embed(title="–¢–∏–∫–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è", description=f"–ö—É—Ä–∞—Ç–æ—Ä: <@{interaction.user.id}> –∫–∞–Ω–∞–ª: {interaction.channel.mention}", color=discord.Colour.dark_grey())
                        await channel.send(embed=embed_control, view=control_ticket_system_users()) # view=buttons_control_ticket()
                        await interaction.response.send_message(f"(id) - –¢–∏–∫–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è {interaction.user.mention}!", ephemeral=True)
                        print(f"{Fore.RED}{interaction.user} {Fore.YELLOW}consideration ticket: {Fore.GREEN}Ticket-System-001{Fore.RESET}")
                    else:
                        print(f"{Fore.RED}{interaction.user} {Fore.YELLOW}channel not found: {Fore.GREEN}Ticket-System-001{Fore.RESET}")
                else:
                    await interaction.response.send_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–∫–µ—Ç–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!", ephemeral=True)
            else:
                await interaction.response.send_message(f"–¢–∏–∫–µ—Ç —É–∂–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è!", ephemeral=True)
        except Exception as e:
            print(f"Error touch button: {e}")
            return await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!", ephemeral=True)


class control_ticket_system_users(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.db_manager = dbMaria()
    @discord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç!", style=discord.ButtonStyle.red, custom_id="control_system_ticket_close")
    @app_commands.checks.has_permissions(administrator=True)
    async def close_ticket_user(self, interaction: discord.Interaction, button: discord.ui.Button):
        user = self.db_manager.get_data_by_condition(condition_column='chat_id', condition_value=interaction.channel.id, table_name='tickets')
        user_id_str = user[0][6]
        user_id_int = int(user_id_str)
        if user_id_int != interaction.user.id:
            await interaction.response.send_message(f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç!", ephemeral=True)
        else:
            await interaction.channel.delete()
            await interaction.response.send_message(f"–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç!", ephemeral=True)
            print(f"{Fore.RED}{interaction.user} {Fore.YELLOW}close ticket: {Fore.GREEN}Ticket-System-001{Fore.RESET}")



async def save_ticket_create(data: dict, table_name: str) -> None:
    try:
        response_database = await dbMaria.insert_data(table_name, data)
        print(f"{Fore.RED}{data['user_id']} {Fore.YELLOW}created ticket: {Fore.GREEN}{table_name}{Fore.RESET}")
        return {"success": True, "error": None}
    except Exception as e:
        print(f"Error saving ticket to database: {e}")
        return {"success": False, "error": str(e)}

"""
- Setup Cogs ->
"""
async def setup(client: commands.Bot) -> None:
    cogs = [ticket_system_report]
    for cog in cogs:
        try:
            await client.add_cog(cog(client), guilds=[discord.Object(id=1200955239281467422)])
            print(f"{Fore.GREEN}Cog '{Fore.RED}{cog}{Fore.GREEN}' successfully added.{Style.RESET_ALL}")
        except Exception as e:
            print(f"{Fore.RED}Error adding cog '{Fore.RED}{cog}{Fore.GREEN}': {e}{Style.RESET_ALL}")
