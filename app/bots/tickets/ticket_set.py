import datetime
import os
import discord
import json
from discord.ext import commands
from colorama import Back, Fore, Style
from discord import app_commands, utils
from discord.ui import View, Button
from database.database import dbMaria
from handlers.hand_package import save_ticket_for_table, generate_ticket_token, check_user
import config
import logging
print = logging.info

class ticket_system_set(commands.Cog):
    def __init__(self, client: commands.Bot):
        self.client = client
    # @app_commands.command(name="set", description="–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤ –¥–ª—è > –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ê–≤—Ç–æ")
    # @app_commands.checks.has_permissions(administrator=True)
    @commands.command(name="set")
    @commands.has_permissions(administrator=True)
    async def ticket_system_report(self, ctx: commands.Context):
        Embed = discord.Embed(title="‚è∞üûÑ –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç –¥–ª—è - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–≤—Ç–æ!", description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", color=0x9bb8a0)
        Embed.set_author(name=f"{config.ticket_system_author}")
        Embed.set_footer(text="``–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–æ–≤: –†–∞–±–æ—Ç–∞–µ—Ç``")

        embed_main = discord.Embed(color=0x9bb8a0, title="‚è∞ ‚Äß ùêãùêíùêÇ - ùôéùôöùôßùô´ùôûùôòùôöùô®", description="""
``·¥Ñ–æ–∑–¥·¥Ä–π·¥õ·¥á ·¥õ–∏·¥ã·¥á·¥õ  ô –Ω·¥Ä…Ø·¥á–π ·¥Ñ–∏·¥Ñ·¥õ·¥á ç·¥á!``
- **__–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!)__**
- <#1205649974843678801>
                            """)
        embed_main.add_field(name="üîß‚Äß –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:", value="""
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: 
 - **__–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã__** 
   - __–î–æ—Å—Ç—É–ø–Ω—ã –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è__ 
   - __–¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è__.
- **–£—Å–ª—É–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞**: 
‚öôÔ∏è _–¢–∞–∫–∂–µ —Å–Ω–∏–º—É –Ω–∞—Ü–µ–Ω–∫—É –≤ **LSC** –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –ø–æ 200–∫_. ``–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ 2–∫–∫`` ‚öôÔ∏è
__–ù–∞—à–∏ –æ–ø—ã—Ç–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞__ 
–ø–æ–º–æ–≥—É—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–π —Å—Ç–∏–ª—å.
                        """)
        embed_main.set_footer(text="ùêãùêíùêÇ - ùôéùôöùôßùô´ùôûùôòùôöùô®  [‚úÖ]")
        embed_main.set_image(url="https://i.imgur.com/7amWKkn.png")

        view = create_ticket_set()

        await ctx.send(embed=embed_main)
        await ctx.send(embed=Embed, view=view)
        print(f"{Fore.RED}{ctx.author.name} {Fore.YELLOW}created ticket system ( –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ê–≤—Ç–æ ): {Fore.GREEN}ticket_system_set{Fore.RESET}")


class create_ticket_set(View):    
    def __init__(self):
        super().__init__(timeout=None)
    @discord.ui.button(label="–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", style=discord.ButtonStyle.green, custom_id="ticket_button_set", emoji="üéü")
    @app_commands.checks.has_permissions(send_messages=True)
    async def create_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        await check_user(id=interaction.user.id, user_name=interaction.user.name)
        modal_windows = await interaction.response.send_modal(modal_window_ticket_system_set())
        if modal_windows is None:
            print(f"{Fore.RED}{interaction.user} {Fore.YELLOW}open modal ticket: {Fore.GREEN}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ê–≤—Ç–æ{Fore.RESET}")
        else:
            await modal_windows.delete()






@app_commands.describe(settings_transport="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?")
class modal_window_ticket_system_set(discord.ui.Modal, title="üìåüûÑ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—É–Ω–∫—Ç—ã"):
    settings_transport = discord.ui.TextInput(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?", placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞!", style=discord.TextStyle.paragraph)
    async def on_submit(self, interaction: discord.Interaction):
        by_category = discord.utils.get(interaction.guild.categories, id=config.ticket_system_set_category)
        ticket = utils.get(interaction.guild.channels, name=f"set-{interaction.user.name}-{interaction.user.id}")
        if ticket is not None:
            await interaction.response.send_message("–¢—ã —É–∂–µ —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç ``–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ`` üì¢!", ephemeral=True)
            return
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
            interaction.user: discord.PermissionOverwrite(read_messages=True, view_channel=True, send_messages=True, embed_links= True, read_message_history = True),
            interaction.guild.me: discord.PermissionOverwrite(read_messages=True, view_channel=True, send_messages=True, embed_links= True, read_message_history = True)
        }
        channel = await interaction.guild.create_text_channel(f"set-{interaction.user.name}-{interaction.user.id}", category=by_category, overwrites=overwrites, reason=f"–¢–∏–∫–µ—Ç—ã {interaction.user}")
        print(f"{Fore.RED}{interaction.user} {Fore.YELLOW}created ticket channel: {Fore.GREEN} {channel.name} {Fore.RESET}")
        if channel.category is not None:
            token_ticket = generate_ticket_token()
            embed_ticket_player = discord.Embed(title=f"üéì ‚≠ë –¢–∏–∫–µ—Ç ID:``{token_ticket}``", description=f"", color= discord.Colour.blue())
            embed_ticket_player.add_field(name=f"üìÉ ‚≠ë –ö–∞–Ω–∞–ª: {channel.mention}", value="")
            embed_ticket_player.add_field(name=f"üìí ‚≠ë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?", value=f"{self.settings_transport}", inline=False)
            await channel.send(f"{interaction.user.mention}",embed=embed_ticket_player)
            embed_message_control_tickets = discord.Embed(title=f"üéì ‚≠ë –¢–∏–∫–µ—Ç ID:``{token_ticket}``", description=f"{interaction.user.mention} —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç - –ø–æ **–ù–∞—Å—Ç—Ä–æ–π–∫–µ –ê–≤—Ç–æ** üì¢")
            embed_message_control_tickets.add_field(name=f"üîë ‚≠ë –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è : ", value=f"""
üìã ‚≠ë –ö–∞–Ω–∞–ª: {channel.mention}
üìû ‚≠ë –ò–º—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: **{interaction.user.name}**
üéô ‚≠ë –ê–π–¥–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ``{interaction.user.id}``
üîî ‚≠ë –£–ø–æ–º–∏–Ω–∞–ª–∫–∞ –î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {interaction.user.mention}
""")
            control_message = interaction.guild.get_channel(config.ticket_system_set_channel_request)
            message_id_control = await control_message.send('<@&1204254986154934415>',embed=embed_message_control_tickets, view=buttons_on_control_ticket_by_moderator())
            sync_database = await save_ticket_for_table(ticket_id=token_ticket, user_id=interaction.user.id, status="New", channel_id=channel.id, message_id=message_id_control.id, created_at=datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            if sync_database is False:
                print(f"Error saving ticket to database: {sync_database}")
                return await interaction.response.send_message("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!", ephemeral=True)
            else:
                await interaction.response.send_message("–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω!", ephemeral=True)
        else:
            print(f"Error creating ticket: Category not found.")
            return await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", ephemeral=True)


class buttons_on_control_ticket_by_moderator(View):
    def __init__(self):
        super().__init__(timeout=None)
    @discord.ui.button(label="–ñ–∞–ª–æ–±–∞", style=discord.ButtonStyle.gray, custom_id="ticket_button_info", emoji="üìå")
    @app_commands.checks.has_permissions(administrator=True)
    async def info_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            embed_information_how_to_use = discord.Embed(title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", description="–ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ç–µ.", color= discord.Colour.dark_grey())
            await interaction.response.send_message(embed=embed_information_how_to_use, ephemeral=True)
        except Exception as e:
            print(f"Error touch button: {e}")
            return await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!", ephemeral=True)
    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.green, custom_id="ticket_button_consideration", emoji="‚úÖ")
    @app_commands.checks.has_permissions(administrator=True)
    async def consideration_ticket(self, interaction: discord.Interaction, button: discord.ui.button):
        try:
            await check_user(id=interaction.user.id, user_name=interaction.user.name)
            user = dbMaria.get_data_by_condition(condition_column='user_id', table_name='users', condition_value=interaction.user.id); user = user[0]
            self.plus_button_clicked_by_user = True
            ticket_data = dbMaria.get_data_by_condition(condition_column='message_id', condition_value=interaction.message.id, table_name='tickets')
            if ticket_data == []:
                await interaction.message.delete()
                return await interaction.response.send_message("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            ticket_data = ticket_data[0]
            user_assignment = dbMaria.get_data_by_condition(condition_column='ticket_id', condition_value=ticket_data['ticket_id'], table_name='assigned_tickets')
            if user_assignment == []:
                await interaction.response.send_message("–í–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç!", ephemeral=True)
                channel_id = int(ticket_data['channel_id'])
                channel = interaction.guild.get_channel(channel_id)
                await channel.set_permissions(interaction.user, read_messages=True, view_channel=True, send_messages=True, embed_links= True, read_message_history = True)
                if channel:
                    embed_for_user = discord.Embed(title="–¢–∏–∫–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è", description=f"""
üî¥ ‚≠ë –ú–µ–Ω–µ–¥–∂–µ—Ä: <@{interaction.user.id}> 
üì¢ ‚≠ë –∫–∞–Ω–∞–ª: {channel.mention}
""", color=discord.Colour.red())
                    await channel.send(f"{interaction.user.mention} <@{ticket_data['user_id']}> –í–∞—à —Ç–∏–∫–µ—Ç –ø—Ä–∏–Ω—è–ª–∏!", embed=embed_for_user)
                    embed_control = discord.Embed(title="**–¢–æ–≤–∞—Ä–∏—â –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–µ—Ä–∂–∏—Ç–µ —Å–≤–æ—é –ø–∞–Ω–µ–ª—å–∫—É**!", description=f"–î—É–º–∞—é –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø–æ—è—Å–Ω—è—Ç—å —á—Ç–æ –∑–∞ —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç.", color=discord.Colour.brand_green())
                    embed_accept = discord.Embed(title=f"ü§ñ ‚≠ë –ü—Ä–∏–Ω—è–ª –¢–∏–∫–µ—Ç: ``{ticket_data['ticket_id']}``", description=f"""
üî¥ ‚≠ë **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: ``{interaction.user.mention}``
üéñ ‚≠ë **–ò–º—è**: ``{interaction.user.name}``
üî• ‚≠ë **–ê–π–¥–∏**: ``{interaction.user.id}``
–ü—Ä–∏–Ω—è–ª –¢–∏–∫–µ—Ç –£—Å–ø–µ—à–Ω–æ! ‚úÖ
""")
                    embed_accept.set_footer(text="ùêãùêíùêÇ - ùôéùôöùôßùô´ùôûùôòùôöùô®  [‚úÖ]")
                    channel_logs = interaction.guild.get_channel(1205648797422719046)
                    await channel_logs.send(embed=embed_accept)
                    await interaction.message.delete()
                    assigned_message = await interaction.user.send(embed=embed_control, view=control_ticket_system_users())
                    dbMaria.insert_assignment(assigned_at=datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), ticket_id=ticket_data['ticket_id'], user_id=interaction.user.id, assignment_id=assigned_message.id)
                    print(f"{Fore.RED}{interaction.user} {Fore.YELLOW}accept ticket: {Fore.GREEN}Ticket-System-001{Fore.RESET}")
                else:
                    print(f"{Fore.RED}{interaction.user} {Fore.YELLOW}channel not found: {Fore.GREEN}Ticket-System-001{Fore.RESET}")
            else:
                return await interaction.response.send_message("–¢–∏–∫–µ—Ç —É–∂–µ –∑–∞–±—Ä–∞–ª–∏!")
        except Exception as e:
            print(f"Error touch button: {e}")
            return await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!", ephemeral=True)

client_control = None
class control_ticket_system_users(View):
    def __init__(self):
        super().__init__(timeout=None)
    @discord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç!", style=discord.ButtonStyle.red, custom_id="control_system_ticket_close", emoji="üß®")
    async def close_ticket_user(self, interaction: discord.Interaction, button: discord.ui.button):
        user = dbMaria.get_data_by_condition(condition_column='assignment_id', condition_value=interaction.message.id, table_name='assigned_tickets')
        if user != []:
            user = user[0]
            channel_data = dbMaria.get_data_by_condition(condition_column='ticket_id', condition_value=user['ticket_id'], table_name='tickets'); channel_data = channel_data[0]
            if channel_data['channel_id'] == None:
                return await interaction.response.send_message("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            channel_info = client_control.client.get_channel(int(channel_data['channel_id']))
            messages = channel_info.history(limit=None, oldest_first=True)
            contents = []
            async for message in messages:
                contents.append(message.content)
            final = "\n".join(contents)
            with open('transcript.txt', 'w') as f:
                f.write(final)
            await interaction.channel.send(file=discord.File('transcript.txt'))
            await client_control.client.get_channel(int(channel_data['channel_id'])).delete()
            await interaction.message.delete()
            dbMaria.delete_one_data(table_name="assigned_tickets",condition_column="ticket_id",condition_value=channel_data['ticket_id'])
            dbMaria.delete_one_data(table_name="tickets",condition_column="ticket_id",condition_value=channel_data['ticket_id'])
            await interaction.response.send_message(f"–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç!", ephemeral=True)
            os.remove("transcript.txt")
            print(f"{Fore.RED}{interaction.user} {Fore.YELLOW}close ticket: {Fore.GREEN}–ù–∞—Å—Ç—Ä–æ–π–∫–∞-–ê–≤—Ç–æ{Fore.RESET}")
        else:
            await interaction.response.send_message(f"–ù–µ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ç–µ!", ephemeral=True)
    @discord.ui.button(label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–∫–µ—Ç–µ", style=discord.ButtonStyle.grey, custom_id="control_system_ticket_info", emoji="üßÆ")
    async def info_ticket_user(self, interaction: discord.Interaction, button: discord.ui.button):
        user = dbMaria.get_data_by_condition(condition_column='assignment_id', condition_value=interaction.message.id, table_name='assigned_tickets')
        if user:
            user = user[0]
            channel_data = dbMaria.get_data_by_condition(condition_column='ticket_id', condition_value=user['ticket_id'], table_name='tickets'); channel_data = channel_data[0]
            if channel_data['channel_id'] == None:
                return await interaction.response.send_message("–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            Embed = discord.Embed(title='üìì ‚≠ë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–∫–µ—Ç–µ', description=f"""
üî¥ ‚≠ë **–¢–∏–∫–µ—Ç –ê–π–¥–∏**: ``{channel_data['ticket_id']}``
üôÇ ‚≠ë **–ê–π–¥–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: <@{channel_data['user_id']}>
üîä ‚≠ë **–°—Ç–∞—Ç—É—Å**: ``{channel_data['status']}``
üì¢ ‚≠ë **–ö–∞–Ω–∞–ª**: <#{channel_data['channel_id']}>
üî• ‚≠ë **–ê–π–¥–∏ –°–æ–æ–±—â–µ–Ω–∏—è**: ``{channel_data['message_id']}``
‚≠êÔ∏è ‚≠ë **–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è**: ``{channel_data['created_at']}``
""", color=0xffffff)
            await interaction.response.send_message(embed=Embed, ephemeral=True)
        else:
            await interaction.response.send_message(f"–ù–µ—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ç–µ!", ephemeral=True)


"""
- Setup Cogs ->
"""
async def setup(client: commands.Bot) -> None:
    global client_control
    try:
        client_control = ticket_system_set(client)
        client.add_view(control_ticket_system_users())
        client.add_view(buttons_on_control_ticket_by_moderator())
        client.add_view(create_ticket_set())
        await client.add_cog(ticket_system_set(client), guilds=[discord.Object(id=1200955239281467422)])
        print(f"{Fore.GREEN}Cog '{Fore.RED}ticket_set{Fore.GREEN}' successfully added.{Style.RESET_ALL}")
    except Exception as e:
        print(f"{Fore.RED}Error adding cog '{Fore.RED}ticket_set{Fore.GREEN}': {e}{Style.RESET_ALL}")
