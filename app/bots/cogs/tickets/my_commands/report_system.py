from colorama import Fore
from discord.ui import View, Button
from discord import app_commands, utils
import discord

import config # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á–∞–º –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º

# --------------------------------------------------------------------------------------------------------------------------------
# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤
# --------------------------------------------------------------------------------------------------------------------------------
class button_create_ticket_report(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(Button(label="–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", style=discord.ButtonStyle.green, custom_id="ticket_button_report", emoji="üéü"))
    @app_commands.checks.has_permissions(send_messages=True)
    async def button_create_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal_windows = await interaction.response.send_modal(modal_window_ticket_system_report())
        if modal_windows is None:
            print(f"{Fore.RED}{interaction.user} {Fore.YELLOW}created ticket: {Fore.GREEN}Ticket-System-001{Fore.RESET}")
        else:
            await modal_windows.delete()
# --------------------------------------------------------------------------------------------------------------------------------  
      
# --------------------------------------------------------------------------------------------------------------------------------
# –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –¥–ª—è —Ä–µ–ø–æ—Ä—Ç–æ–≤
# --------------------------------------------------------------------------------------------------------------------------------
@app_commands.describe(problem="–ü—Ä–æ–±–ª–µ–º–∞", description_problem="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
class modal_window_ticket_system_report(discord.ui.Modal, title="üìåüûÑ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è: —Ä–µ–ø–æ—Ä—Ç–æ–≤"):
    problem = discord.ui.TextInput(label="–ü—Ä–æ–±–ª–µ–º–∞", placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –∫—Ä–∞—Ü–∏–∏", style=discord.TextStyle.short)
    description_problem = discord.ui.TextInput(label="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", placeholder="–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É", style=discord.TextStyle.paragraph)
    async def on_submit(self, interaction: discord.Interaction):
        by_category = discord.utils.get(interaction.guild.categories, id=config.ticket_system_report_category)
        ticket = utils.get(interaction.guild.channels, name=f"report-{interaction.user.name}-{interaction.user.id}")
        if ticket is not None:
            await interaction.response.send_message("–¢—ã —É–∂–µ —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç!", ephemeral=True)
            return
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
            interaction.user: discord.PermissionOverwrite(read_messages=True, view_channel=True, send_messages=True, embed_links= True, read_message_history = True),
            interaction.guild.me: discord.PermissionOverwrite(read_messages=True, view_channel=True, send_messages=True, embed_links= True, read_message_history = True)
        }
        channel = await interaction.guild.create_text_channel(f"report-{interaction.user.name}-{interaction.user.id}", category=by_category, overwrites=overwrites, reason=f"–¢–∏–∫–µ—Ç—ã {interaction.user}")
        embed_ticket_player = discord.Embed(title=f"–¢–∏–∫–µ—Ç ID:``{interaction.user.id}``", description=f"{interaction.user.mention} –í—ã —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–π —Ç–∏–∫–µ—Ç!", color= discord.Colour.blue())
        embed_ticket_player.add_field(name=f"–ü—Ä–æ–±–ª–µ–º–∞", value=f"{self.problem}", inline=True)
        embed_ticket_player.add_field(name=f"–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", value=f"{self.description_problem}", inline=False)
        message_id = await channel.send(embed=embed_ticket_player)
        await interaction.response.send_message("–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω!", ephemeral=True)
# --------------------------------------------------------------------------------------------------------------------------------